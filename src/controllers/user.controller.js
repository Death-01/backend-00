import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";

const registerUser = asyncHandler(async (req, res) => {
   /*
   get user details from frontend {fullname ,username,password,email}
   validate fields - not empty
   check if user already exists: username, email
   check for images and avatar
   upload them to cloudinary: avatar
   create user object - create entry in db
   remove password and refresh token field from response
   check for user creation
   return res 
   */

   //while sending the req we added json inside request's body
   const { userName, fullName, password, email } = req.body;
   console.log(userName, fullName, password, email);
   //   {avatar,coverImage are taken from the multer middleware }

   //validation of the fields if they are empty
   // if(userName==="") (writing same if condition for all the fields is same as below codition)
   if (
      [userName, fullName, email, password].some(
         (field) => field?.trim() === ""
         // ?. is optional chaining operator(if the field is null or undefined) it will return undefined when used with trim to prevent the error cannot read properties of null generated by => (null/undefined).trim()
      )
   ) {
      throw new ApiError(400, "All fields are required");
   }

   const existedUser = User.findOne({
      $or: [{ userName }, { email }], // try using {userName:userName}
   });
   if (existedUser) {
      throw new ApiError(409, "User with username or email already existed");
   }

   const avatarLocalPath = req.files?.avatar[0]?.path;
   const coverImageLocalPath = req.files?.coverImage[0]?.path;

   //checking if avatar is present or not
   if (!avatarLocalPath) {
      throw new ApiError(400, "Avatar file is required");
   }

   const avatar = await uploadOnCloudinary(avatarLocalPath);
   const coverImage = await uploadOnCloudinary(coverImageLocalPath);

   if (!avatar) {
      throw new ApiError(400, "Avatar file is required ");
   }

   const user = await User.create({
      fullName,
      avatar: avatar.url,
      coverImage: coverImage?.url || "",
      userName: userName.toLowerCase(),
      password,
      email,
   });

   //checking if the user is registered in db
   //removing password and refreshToken field from the response
   const createdUser = await User.findById(user._id).select(
      "-password -refreshToken"
   );
   if (!createdUser) {
      throw new ApiError(500, "Something went wrong while registering user");
   }

   res.status(201).json(
      new ApiResponse(200, createdUser, "User resgistered successfully")
   );
});
export { registerUser };
