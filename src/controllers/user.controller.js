import { asyncHandler } from "../utils/asyncHandler.js";
import { ApiError } from "../utils/ApiError.js";
import { User } from "../models/user.model.js";
import { uploadOnCloudinary } from "../utils/cloudinary.js";
import { ApiResponse } from "../utils/ApiResponse.js";
import { json } from "express";

//this is a local funtion to generate token
const generateAccessAndRefreshToken = async (userId) => {
   try {
      const user = await User.findById(userId);
      const accessToken = user.generateAccessToken();
      const refreshToken = user.generateRefreshToken();

      // inserting the token in user object
      user.refreshToken = refreshToken;
      //we have not validated user before saving it to the db because of the pre-middleware("save") that will encrypt password always when we save a user
      await user.save({ validateBeforeSave: false });

      return { accessToken, refreshToken };
   } catch (error) {
      throw new ApiError(500, "Something went wrong while generating token");
   }
};

const registerUser = asyncHandler(async (req, res) => {
   /*    Algorithm for registering user
   get user details from frontend {fullname ,username,password,email}
   validate fields - not empty
   check if user already exists: username, email
   check for images and avatar
   upload them to cloudinary: avatar
   create user object - create entry in db
   remove password and refresh token field from response
   check for user creation
   return res 
   */

   //while sending the req we added json inside request's body
   const { userName, fullName, password, email } = req.body;
   console.log(userName, fullName, password, email);
   //   {avatar,coverImage are taken from the multer middleware }
   // console.log(req.files, req.route, req.body);

   //validation of the fields if they are empty
   // if(userName==="") (writing same if condition for all the fields is same as below codition)
   if (
      [userName, fullName, email, password].some(
         (field) => field?.trim() === "" || field?.trim() === undefined
         // ?. is optional chaining operator(if the field is null or undefined) it will return undefined when used with trim to prevent the error cannot read properties of null generated by => (null/undefined).trim()
         // both conditions check for [filled with whitespaces] or null or undefined
      )
   ) {
      throw new ApiError(400, "All fields are required");
   }

   //check if the user already exists
   const existedUser = await User.findOne({
      $or: [{ userName }, { email }], // try using {userName:userName}
   });
   // console.log("existedUser->", existedUser);

   if (existedUser) {
      throw new ApiError(409, "User with username or email already existed");
   }
   // console.log(req.files);
   // console.log(req.files.avatar);
   // console.log(req.files?.avatar?.[0]);
   // console.log(req.files?.avatar?.[0].path);

   // obtaining local path for the uploaded files
   const avatarLocalPath = req.files?.avatar?.[0].path;
   const coverImageLocalPath = req.files?.coverImage?.[0]?.path;

   // console.log(avatarLocalPath);

   //checking if avatar is present or not
   if (!avatarLocalPath) {
      throw new ApiError(400, "Avatar file is required");
   }

   const avatar = await uploadOnCloudinary(avatarLocalPath);
   const coverImage = await uploadOnCloudinary(coverImageLocalPath);

   // console.log(avatar);
   // console.log(coverImage);

   if (!avatar) {
      throw new ApiError(400, "Avatar file is required ");
   }

   const user = await User.create({
      fullName,
      avatar: avatar.url,
      // if coverImage url is not present then leave empty string
      coverImage: coverImage?.url || "",
      userName: userName.toLowerCase(),
      password,
      email,
   });

   // console.log(user);

   //checking if the user is registered in db
   //removing password and refreshToken field from the response
   const createdUser = await User.findById(user._id).select(
      "-password -refreshToken"
   );
   if (!createdUser) {
      throw new ApiError(500, "Something went wrong while registering user");
   }
   // console.log(User);

   res.status(201).json(
      new ApiResponse(200, createdUser, "User resgistered successfully")
   );
});

const loginUser = asyncHandler(async (req, res) => {
   /* 
      taking data from the user (email,username,password)
      find user in db
      password check
      generate access and refresh token 
      send cookies
   */

   const { userName, email, password } = req.body;
   // console.log(userName, email, password);

   //checking if we have the required data
   if (!(userName || email) && !password) {
      throw new ApiError(400, "Username or email and password are required");
   }

   //finding user in db
   const user = await User.findOne({
      $or: [{ userName }, { email }],
   });

   if (!user) {
      throw new ApiError(400, "User does not exist");
   }

   //checking if the password is correct
   const isPasswordValid = await user.isPasswordCorrect(password);
   if (!isPasswordValid) {
      throw new ApiError(404, "Invalid user credentials");
   }

   //generating refresh and access token via local funtion
   const { accessToken, refreshToken } = await generateAccessAndRefreshToken(
      user._id
   );

   // console.log(user);

   //getting the updated user which now have the refreshToken
   //we can also get the updated user from the above code as well
   const loggedInUser = await User.findById(user._id).select(
      "-password -refreshToken"
   );

   const options = {
      // frontend(user) will not be able to modify cookies only the server can
      http: true,
      secure: true,
   };
   res.status(200)
      .cookie("accessToken", accessToken, options)
      .cookie("refreshToken", refreshToken, options)
      .json(
         new ApiResponse(
            200,
            {
               user: loggedInUser,
               refreshToken,
               accessToken,
            },
            "User loggedin successfully"
         )
      );
   // console.log(req.cookies.refreshToken);
});

const logoutUser = asyncHandler(async (req, res) => {
   const updated_user = await User.findByIdAndUpdate(
      // we have inserted user in the req via auth.middleware
      req.user._id,
      {
         // $set: {
         // mongodb by default ignores the values like undefined, hence the $set will have no effect
         //    refreshToken: "undefined",
         // },
         $unset: {
            // used to remove the field
            refreshToken: 1,
         },
      },
      {
         // "new" returns the new updated user with refreshToken set undefined
         new: true,
      }
   );
   const options = {
      http: true,
      secure: true,
   };
   // console.log(updated_user);

   res.status(200)
      .clearCookie("accessToken", "", options)
      .clearCookie("refreshToken", "", options)
      .json(new ApiResponse(200, {}, "User logged out"));
});

export { registerUser, loginUser, logoutUser };
